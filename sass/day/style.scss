// preprocessor css-> sass -> compilation -> css
// browser dont understand preprocesssor langaugae
// scripting language -> inter  - runtime - line by line
// preprocessor -> similar css -> feature , spaical syntax -> programming language
// variablres , functions , loops , etc
// readaciltiy , safe time , reusablity
// .parent{}
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// .chiled1
// sass(scss) , less , styles -> sass(scss) -> closest one to css (syntax) -> sass
// bootstrap -> sass
// community , feature , customization easy , overrtiding
// specificity -> algo -> weight selector -> apply
// (0 ,0 ,0 ,0)
// inline -> id -> classd-attr-pseudo class -> elem- pseudoElem
// selectors
// class , id , type , + adjacnt sibling , > child , ~ general sibling , attr , * , pseudo class , pseudoElem
// sass(scss) ->
// sass -> old version - indentation {}  ; -> sentactically style sheet
// scss -> latest version -> css {} ; -> sassy css
// cascading ?
// rule css ?
// .parent {
//   background-color: red;
// }
// $hh: 55; -> X
// install
// 1-> extension vs code -> live sass compiler
// 2-> package sass -> npm i sass -g -> style folder -> css , scss -> sass --watch scss:css
// 3-> desktop app -> koala , prepros , composs -> convert min.css
// .map
// .parent {
//   .child {
//     background-color: red;
//   }
// }

// 1-> comment
// scss -> not compiled to css
/* compiled to css */
/*! compiled to css and min css */

// 2-> nesting
// .parent .chiled9 {

// } // descendant

// .parent {
//   background-color: blue;
//   .chiled6 {
//     background-color: yellow;
//     .fffff {
//       .ffff {
//         .fff {
//           background-color: green;
//         }
//       }
//     }
//   }
// }
// 4 level

//ambersand & -> selector name
// .container {
//   & {
//     background-color: red;
//   }

//   &-child {
//     background-color: blue;
//   }

//   &,
//   &-child {
//     background-color: green($color: #000000);
//   }
// }

// .parent {
//   .child {
//     background-color: red;
//   }
// }

// directive @
// @extend
// .parent,
// .parent2 {
//   background-color: red;
//   padding: 2;
// }

// .parent2 {
//   background-color: green;
//   margin: 1px;
// }

// .parent {
//   background-color: red;
//   padding: 2;
// }

// .parent2 {
//   background-color: blue;
//   @extend .parent;
// }

// -> %placeholder ->
%button {
  align-items: center;
  background-image: linear-gradient(144deg, #af40ff, #5b42f3 50%, #00ddeb);
  border: 0;
  border-radius: 8px;
  box-shadow: rgba(151, 65, 252, 0.2) 0 15px 30px -5px;
  box-sizing: border-box;
  color: #ffffff;
  display: flex;
  font-size: 18px;
  justify-content: center;
  line-height: 1em;
  max-width: 100%;
  min-width: 140px;
  padding: 3px;
  text-decoration: none;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  white-space: nowrap;
  cursor: pointer;
  transition: all 0.3s;

  &:active,
  &:hover {
    outline: 0;
  }

  & span {
    background-color: rgb(5, 6, 45);
    padding: 16px 24px;
    border-radius: 6px;
    width: 100%;
    height: 100%;
    transition: 300ms;
  }

  &:hover span {
    background: none;
  }

  &:active {
    transform: scale(0.9);
  }
}

.btn {
  @extend %button;
}
// .jjj {
//   @extend %button;
// }

// variables
// :root {
//   --varrr: red;
// }
// .bb {
//   background-color: var(--varrr);
// }
$varr: red;
.fff {
  $varr: blue;
  background-color: $varr;
}

.yyyyy {
  background-color: $varr;
}

$listVar: red, green, blue;
// -> list (array)
.hhhh {
  background-color: nth($listVar, 3);
}

$listMap: (
  p: green,
  n: red,
);

.ggg {
  background-color: map-get($listMap, p);
}

// partial file _name.scss
$primary: aqua;
@import "variables";
.jj {
  background-color: $primary;
}
// -> `${}` -> #{$var} interpolation

//-> loops
// @for
// @while
// @each

// $length: 5;
// <
// @for $i from 1 to 5 {
//   .ch#{$i} {
//     width: 10px * $i;
//   }
// }
// <=
// @for $i from 1 through length($list) {
//   .ch#{$i} {
//     background-color: nth($list, $i);
//   }
// }
// $i: 1;
// @while $i <= length($list) {
//   .ch#{$i} {
//     background-color: nth($list, $i);
//   }
//   $i: $i + 1;
// }

// @each $color in $list {
//   .ch#{$color} {
//     background-color: $color;
//   }
// }

// @each $key, $color in $map {
//   .ch-#{$key} {
//     background-color: $color;
//   }
// }

//@function
// .pp {
// width:  calc(   );
// }

// @function half($w: 200%) {
//   @if $w > 100% {
//     @return $w / 2;
//   } @else if($w < 100%) {
//     @return $w / 3;
//   }
// }
// .pp {
//   width: half(50%);
// }

//mixins -> real function
// @mixin button($color) {
//   background-color: $color;
// }

// .kk {
//   @include button(red);
// }

// @media (min-width) {
//   body {
//     background-color: red;
//   }
// }

// body {
//   @media (min-width: 500px) {
//     background-color: red;
//   }
//   @media (min-width: 700px) {
//     background-color: blue;
//   }
//   @media (min-width: 900px) {
//     background-color: green;
//   }
// }

// h1 {
//   @media (min-width: 500px) {
//     background-color: red;
//   }
//   @media (min-width: 700px) {
//     background-color: blue;
//   }
//   @media (min-width: 900px) {
//     background-color: green;
//   }
// }

@mixin gridSystem($breakpoint: 0px, $screenName: "", $count: 12) {
  @if $screenName == "" {
    @for $i from 1 through $count {
      .col-#{$i} {
        width: calc(100% / $count * $i);
      }
    }
  } @else {
    @for $i from 1 through $count {
      @media (min-width: $breakpoint) {
        .col-#{$screenName}-#{$i} {
          width: calc(100% / $count * $i);
        }
      }
    }
  }
}
